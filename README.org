* P2P File Sync

** Configuration
The configuration file holds information about the tracked folders and peers.
The following is an example layout. ~folder.id~ has to be unique and the same
across devices.
#+begin_src toml
[[peers]]
ip = "172.20.0.3"
folders = [1]

[[paths]]
id = 1
path = "/home/user/documents"

[[paths]]
id = 2
path = "/home/user/downloads"
#+end_src

** Syncing
*** Database Layout
| Name                | Description                                        | Type               |
|---------------------+----------------------------------------------------+--------------------|
| ~path~                | The absolute path of a file                        | ~String~             |
| ~local_hash~          | The local hash of a file                           | ~Vec<u8>~            |
| ~local_last_modified~ | The local last modified date                       | ~u64~ Unix timestamp |
| ~global_hash~         | The hash of the newest file version in the network | ~Vec<u8>~            |
| ~global_last_mdofied~ | The global last modified date                      | ~u64~ Unix timestamp |
| ~global_peer~         | The peer with the newest file. ~0~, if peer itself   | ~String~             |
*** Scan
Every node keeps a local database with version of all files. On startup, this
database is updated in the following way:
1. If the entry is not a file, skip
2. Check if the file is already in the database
   + If not, enter it, with ~local_hash~ and ~global_hash~ set to its ~Sha256~ hash
     and the ~local_last_modified~ and ~global_last_modified~ to the last modified
     property of the file.
   + If it is, check if it was modified, by looking at the ~local_last_modified~ property
     - If not, we are done
     - If it was modified, recalculate and update the ~local_hash~
       - If the ~local_last_modified~ is newer then the ~global_last_modified~, update
         the ~global_hash~ and the ~global_last_modified~
*** Connection
Every connection attempt with peers we share no folder with is immediately
dropped. Otherwise, for each folder we share, we first check which files
are out of sync. Generally, only database changes are explicitly "synced",
the peers have to request file updates based on the state of their database.
**** Initial Update
For each peer, the following steps are done:
1. Get the next folder which is shared with that peer. If none, continue with 4.
2. Send ~InitiateDbSync~, so the peer starts to receive the db state.
3. Send our database state for this folder. See the corresponding section.
4. Send ~Done~, once done with one folder. Continue with 1.
5. If all folders are done, send ~Done~.
6. ~RequestDbSync~, which results in the peer to send their database state.
7. Start actual file sync
**** Sending Database
+ Send ~DbSync~ with the ~folder_id~
+ If peer wants info, we receive a ~Yes~, otherwise ~No~, and we are done.
+ For each file we
  - Send ~InitiatorGlobal~ to send the global file metadata.
  - Wait for ~Yes~ to continue with next file.
**** File synchronization
The file synchronization runs permanently in the background and listens
on a MPSC channel if it should rerun. If this is the case, the following
steps are done:
1. Fetch all files from the database, where either
   - No local hash exists, meaning that we aren't tracking the file locally
   - The global hash does not match the local hash, meaning that we have
     an outdated version.
2. For each file establish a new connection with the ~global_peer~ of the file
3. Send a ~RequestFile~ with the file information
4. Receive a ~File~, write it to disk and update our database
*** Watcher Changes
This section describes what happens if files change while we are listening to
them.
1. Load the (potentially) old state of the file from the database
2. Update the database with the current file
3. If the the ~global_hash~ of the old state and the new ~local_hash~ match, don't
   have to announce our changes, as we probably just received the update. Done.
4. If not, iterate over all peers and announce the change by:
   + Establishing a connection
   + Sending ~InitiateDbSync~, just like in the initial update
   + Send ~DbSync~ with the ~folder_id~ of the changed file
   + Wait for a ~Yes~ to make sure the peer is interested in this folder
   + Send ~InitiatorGlobal~ with the file state

** Roadmap
*** TODO CLI [0/2]
- [ ] Editing of peers
- [ ] More information on available shortcuts
*** TODO Sync [0/5]
- [ ] Use [[https://en.wikipedia.org/wiki/Merkle_tree][Merkle]] tree to reduce sync overhead
- [ ] Support propagation of deleted files
- [ ] Rescan if new ~WatchFolder~ is added with the CLI
- [ ] Partial file updates
- [ ] Connection pooling, especially for file sync
